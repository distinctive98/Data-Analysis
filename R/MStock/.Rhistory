temp_df
#긍/부정테이블 * 단어테이블
for(i in  1:15){
temp_pos <- data.frame()
temp_neg <- data.frame()
text_em <- data.frame()
text_em <- rbind(text_pos[[i]], text_neg[[i]])[1]
names(text_em) <- c('word')
temp_df <- c()
for(word in table_em$word){
if(any(word == text_em)){
#print(TRUE)
temp_df <- c(temp_df,1)
} else {
#print(FALSE)
temp_df <- c(temp_df,0)
}
}
temp_df <- data.frame(temp_df)
table_em <- cbind(temp_df)
}
table_em
table_em <- Filter(function(x){2 <= nchar(x) & nchar(x) <= 6}, unlist(textData))
table_em <- data.frame(table(table_em))[1]
table_em <- table_em %>% filter(!table_em %in% filterWords) %>% filter(table_em %in% positive | table_em %in% negative)
names(table_em) <- c('word')
head(table_em)
table_em
#긍/부정테이블 * 단어테이블
for(i in  1:15){
text_em <- data.frame()
text_em <- rbind(text_pos[[i]], text_neg[[i]])[1]
names(text_em) <- c('word')
temp_df <- c()
for(word in table_em$word){
if(any(word == text_em)){
#print(TRUE)
temp_df <- c(temp_df,1)
} else {
#print(FALSE)
temp_df <- c(temp_df,0)
}
}
temp_df <- data.frame(temp_df)
head(temp_df)
#table_em <- cbind(temp_df)
}
#단어테이블 생성
table_em <- Filter(function(x){2 <= nchar(x) & nchar(x) <= 6}, unlist(textData))
table_em <- data.frame(table(table_em))[1]
table_em <- table_em %>% filter(!table_em %in% filterWords) %>% filter(table_em %in% positive | table_em %in% negative)
names(table_em) <- c('word')
head(table_em)
#긍/부정테이블 * 단어테이블
for(i in  1:15){
text_em <- data.frame()
text_em <- rbind(text_pos[[i]], text_neg[[i]])[1]
names(text_em) <- c('word')
temp_df <- c()
for(word in table_em$word){
if(any(word == text_em)){
#print(TRUE)
temp_df <- c(temp_df,1)
} else {
#print(FALSE)
temp_df <- c(temp_df,0)
}
}
temp_df <- data.frame(temp_df)
print(i)
head(temp_df)
#table_em <- cbind(temp_df)
}
#단어테이블 생성
table_em <- Filter(function(x){2 <= nchar(x) & nchar(x) <= 6}, unlist(textData))
table_em <- data.frame(table(table_em))[1]
table_em <- table_em %>% filter(!table_em %in% filterWords) %>% filter(table_em %in% positive | table_em %in% negative)
names(table_em) <- c('word')
head(table_em)
#긍/부정테이블 * 단어테이블
for(i in  1:15){
text_em <- data.frame()
text_em <- rbind(text_pos[[i]], text_neg[[i]])[1]
names(text_em) <- c('word')
temp_df <- c()
for(word in table_em$word){
if(any(word == text_em)){
#print(TRUE)
temp_df <- c(temp_df,1)
} else {
#print(FALSE)
temp_df <- c(temp_df,0)
}
}
temp_df <- data.frame(temp_df)
head(temp_df)
print(i)
#table_em <- cbind(temp_df)
}
table_em
text_pos
text_neg
text_em <- rbind(text_pos[[8]], text_neg[[8]])[1]
text_em
length(text_em)
length(text_em[1])
length(text_em[1,])
length(text_em[,1])
text_em <- rbind(text_pos[[7]], text_neg[[7]])[1]
length(text_em[,1])
text_em <- rbind(text_pos[[8]], text_neg[[8]])[1]
length(text_em[,1])
text_em <- rbind(text_pos[[1]], text_neg[[1]])[1]
length(text_em[,1])
text_em <- rbind(text_pos[[8]], text_neg[[8]])[1]
length(text_em[,1])
continue;
#단어테이블 생성
table_em <- Filter(function(x){2 <= nchar(x) & nchar(x) <= 6}, unlist(textData))
table_em <- data.frame(table(table_em))[1]
table_em <- table_em %>% filter(!table_em %in% filterWords) %>% filter(table_em %in% positive | table_em %in% negative)
names(table_em) <- c('word')
head(table_em)
#긍/부정테이블 * 단어테이블
for(i in  1:15){
text_em <- data.frame()
text_em <- rbind(text_pos[[i]], text_neg[[i]])[1]
if(length(text_em[,1]) > 0){
names(text_em) <- c('word')
temp_df <- c()
for(word in table_em$word){
if(any(word == text_em)){
#print(TRUE)
temp_df <- c(temp_df,1)
} else {
#print(FALSE)
temp_df <- c(temp_df,0)
}
}
temp_df <- data.frame(temp_df)
#table_em <- cbind(temp_df)
}
}
table_em
#단어테이블 생성
table_em <- Filter(function(x){2 <= nchar(x) & nchar(x) <= 6}, unlist(textData))
table_em <- data.frame(table(table_em))[1]
table_em <- table_em %>% filter(!table_em %in% filterWords) %>% filter(table_em %in% positive | table_em %in% negative)
names(table_em) <- c('word')
head(table_em)
#긍/부정테이블 * 단어테이블
for(i in  1:15){
text_em <- data.frame()
text_em <- rbind(text_pos[[i]], text_neg[[i]])[1]
if(length(text_em[,1]) > 0){
names(text_em) <- c('word')
temp_df <- c()
for(word in table_em$word){
if(any(word == text_em)){
#print(TRUE)
temp_df <- c(temp_df,1)
} else {
#print(FALSE)
temp_df <- c(temp_df,0)
}
}
temp_df <- data.frame(temp_df)
table_em <- cbind(temp_df)
}
}
table_em
table_em <- Filter(function(x){2 <= nchar(x) & nchar(x) <= 6}, unlist(textData))
table_em <- data.frame(table(table_em))[1]
table_em <- table_em %>% filter(!table_em %in% filterWords) %>% filter(table_em %in% positive | table_em %in% negative)
names(table_em) <- c('word')
head(table_em)
#긍/부정테이블 * 단어테이블
for(i in  1:15){
text_em <- data.frame()
text_em <- rbind(text_pos[[i]], text_neg[[i]])[1]
if(length(text_em[,1]) > 0){
names(text_em) <- c('word')
temp_df <- c()
for(word in table_em$word){
if(any(word == text_em)){
#print(TRUE)
temp_df <- c(temp_df,1)
} else {
#print(FALSE)
temp_df <- c(temp_df,0)
}
}
temp_df <- data.frame(temp_df)
table_em <- cbind(table_em,temp_df)
}
}
table_em
table_em <- Filter(function(x){2 <= nchar(x) & nchar(x) <= 6}, unlist(textData))
table_em <- data.frame(table(table_em))[1]
table_em <- table_em %>% filter(!table_em %in% filterWords) %>% filter(table_em %in% positive | table_em %in% negative)
names(table_em) <- c('word')
head(table_em)
#긍/부정테이블 * 단어테이블
cnt <- 2
for(i in  1:15){
text_em <- data.frame()
text_em <- rbind(text_pos[[i]], text_neg[[i]])[1]
if(length(text_em[,1]) > 0){
names(text_em) <- c('word')
temp_df <- c()
for(word in table_em$word){
if(any(word == text_em)){
#print(TRUE)
temp_df <- c(temp_df,1)
} else {
#print(FALSE)
temp_df <- c(temp_df,0)
}
}
temp_df <- data.frame(temp_df)
table_em <- cbind(table_em,temp_df)
names(table_em)[cnt] <- paste0('d',cnt-1)
cnt <- cnt + 1
}
}
table_em
for(word in table_em$word){
print(word)
}
text_pos
table_em
textData
textData_wd_df
#워드클라우드
textData_wc <- Filter(function(x){2 <= nchar(x) & nchar(x) <= 6}, unlist(textData))
textData_wc_df <- data.frame(sort(table(textData_wc), decreasing = T))
textData_wd_df <- textData_wc_df %>% filter(!textData %in% filterWords)
head(textData_wd_df)
#워드클라우드
textData_wc <- Filter(function(x){2 <= nchar(x) & nchar(x) <= 6}, unlist(textData))
textData_wc_df <- data.frame(sort(table(textData_wc), decreasing = T))
textData_wc_df
textList
textList <- list()
textData
unlist(textData)
tf_bot <- Filter(function(x){2 <= nchar(x) & nchar(x) <= 6}, unlist(textData))
tf_bot
tf_bot
tf_bot <- data.frame(Filter(function(x){2 <= nchar(x) & nchar(x) <= 6}, unlist(textData)))
tf_bot
head(tf_bot)
names(tf_bot)[1] <- 'word'
head(tf_bot)
tf_bot <- tf_bot %>% filter(word %in% positive | word %in% negative)
tf_bot
tf_bot <- length(tf_bot[1])
tf_bot
tf_bot <- tf_bot %>% filter(word %in% positive | word %in% negative)
tf_idf <- data.frame()
#TF : 문서 내 단어의 개수/문서 내 모든 단어의 개수
tf_bot_df <- data.frame(Filter(function(x){2 <= nchar(x) & nchar(x) <= 6}, unlist(textData)))
names(tf_bot_df)[1] <- 'word'
tf_bot_df <- tf_bot_df %>% filter(word %in% positive | word %in% negative)
tf_bot_df
length(tf_bot_df)
length(tf_bot_df[,1])
tf_bot <- length(tf_bot_df[,1])
tf_bot
tf <- c()
text_em
emotion
text_pos
tf_bot_df
tf_top_df <- data.frame(table(tf_bot_df))
tf_top_df
tf_bot_df
table(tf_bot_df)
tf_bot_df
tf_bot_df <- data.frame(Filter(function(x){2 <= nchar(x) & nchar(x) <= 6}, unlist(textData)))
names(tf_bot_df)[1] <- 'word'
tf_bot_df <- tf_bot_df %>% filter(word %in% positive | word %in% negative)
tf_bot <- length(tf_bot_df[,1])
tf_top_df <- data.frame(table(tf_bot_df))
tf_top_df
tf_bot_df <- data.frame(Filter(function(x){2 <= nchar(x) & nchar(x) <= 6}, unlist(textData)))
names(tf_bot_df)[1] <- 'word'
tf_bot_df <- tf_bot_df %>% filter(word %in% positive | word %in% negative)
tf_top_df <- data.frame(table(tf_bot_df))
tf_top_df
tf_bot_df <- tf_bot_df %>% filter(word %in% positive | word %in% negative)
tf_bot_df
table(tf_bot_df)
tf_top_df <- table(tf_bot_df)
tf_top_df
tf_top_df <- data.frame(table(tf_bot_df))
head(tf_top_df)
tf_top_df <- data.frame(table(tf_bot_df)) %>% filter(tf_bot_df %in% positive | word %in% negative)
tf_top_df
table_em
tf_top_df <- data.frame(table(tf_bot_df)) %>% filter(tf_bot_df %in% positive | tf_bot_df %in% negative)
tf_top_df
names(tf_top_df)[1] <- 'word'
head(tf_top_df)
tf_top_df['가능']
tf_top_df$word == '가능'
subset(tf_top_df, word=='가능')
subset(tf_top_df, word=='가능')[2]
a <- subset(tf_top_df, word=='가능')[2]
a
a[1]
a[,1]
for(word in table_em$word){
subset(tf_top_df, word==word)[2]
}
tf_top <- c()
tf_top <- c()
for(word in table_em$word){
tf_top <- c(tf_top, subset(tf_top_df, word==word)[2])
}
tf_top
tf_top <- c()
for(table_word in table_em$word){
tf_top <- c(tf_top, subset(tf_top_df, word==table_word)[2])
}
tf_top
a <- subset(tf_top_df, word=='가능')[2]
mode(a)
a <- data.frame(subset(tf_top_df, word=='가능')[2])
a
mode(a)
tf_top <- c()
for(table_word in table_em$word){
tf_top <- c(tf_top, data.frame(subset(tf_top_df, word==table_word)[2]))
}
tf_top
tf_top <- c()
for(table_word in table_em$word){
tf_top_c <- subset(tf_top_df, word==table_word)[2]
tf_top <- c(tf_top, tf_top_c[,1])
}
tf_top
tf_top <- c()
for(table_word in table_em$word){
tf_top_list <- subset(tf_top_df, word==table_word)[2]
tf_top <- c(tf_top, tf_top_list[,1])
}
tf_top
tf_top <- tf_top / tf_bot
tf_top
tf <- c()
tf_top <- c()
for(table_word in table_em$word){
tf_top_list <- subset(tf_top_df, word==table_word)[2]
tf_top <- c(tf_top, tf_top_list[,1])
}
tf <- tf_top / tf_bot
tf
tf_idf <- rbind(tf)
tf_idf
tf_idf <- data.frame()
tf_idf <- cbind(tf)
tf_idf
tf_idf <- data.frame()
idf <- c()
cnt
idf_top <- cnt-1
idf_top
tf_bot_df
text_pos
text_neg
text_all <- data.frame()
text_all <- list()
text_all
text_all <- list()
for(i in 1:15){
text_all[[i]] <- data.frame()
if(text_pos[[i]][,1] > 0){
rbind(text_all[[i]], text_pos[[i]])
}
if(text_neg[[i]][,1] > 0){
rbind(text_all[[i]], text_neg[[i]])
}
}
text_pos
text_pos[[1]][,1]
length(text_pos[[1]][,1])
length(text_pos[[7]][,1])
text_all <- list()
for(i in 1:15){
text_all[[i]] <- data.frame()
if(length(text_pos[[i]][,1] > 0)){
rbind(text_all[[i]], text_pos[[i]])
}
if(length(text_neg[[i]][,1] > 0)){
rbind(text_all[[i]], text_neg[[i]])
}
}
text_all
temp_a <- data.frame()
rbind(temp_a, text_pos[[1]])
temp_a
rbind(temp_a, text_pos[[1]])
temp_a
temp_a <- data.frame()
cbind(temp_a, text_pos[[1]])
temp_a
temp_a <- data.frame()
rbind(temp_a, text_pos[[1]])
temp_a
text_pos[[1]]
mode(text_pos[[1]])
temp_a <- data.frame()
rbind(temp_a, data.frame(text_pos[[1]]))
temp_a
temp_a <- data.frame()
temp_a <- rbind(temp_a, data.frame(text_pos[[1]]))
temp_a
temp_a <- rbind(temp_a, data.frame(text_pos[[2]]))
temp_a
text_all <- list()
for(i in 1:15){
text_all[[i]] <- data.frame()
if(length(text_pos[[i]][,1] > 0)){
text_all[[i]] <- rbind(text_all[[i]], text_pos[[i]])
}
if(length(text_neg[[i]][,1] > 0)){
text_all[[i]] <- rbind(text_all[[i]], text_neg[[i]])
}
}
text_all
idf_bot <- c()
word_cnt <- 0
text_all <- list()
for(i in 1:15){
text_all[[i]] <- data.frame()
if(length(text_pos[[i]][,1] > 0)){
text_all[[i]] <- rbind(text_all[[i]], text_pos[[i]])
}
if(length(text_neg[[i]][,1] > 0)){
text_all[[i]] <- rbind(text_all[[i]], text_neg[[i]])
}
names(text_all[[i]][1]) <- 'word'
}
text_all
text_all[[1]][1]
text_all <- list()
for(i in 1:15){
text_all[[i]] <- data.frame()
if(length(text_pos[[i]][,1] > 0)){
text_all[[i]] <- rbind(text_all[[i]], text_pos[[i]])
}
if(length(text_neg[[i]][,1] > 0)){
text_all[[i]] <- rbind(text_all[[i]], text_neg[[i]])
}
names(text_all[[i]]) <- 'word'
}
text_all
text_all <- list()
for(i in 1:15){
text_all[[i]] <- data.frame()
if(length(text_pos[[i]][,1] > 0)){
text_all[[i]] <- rbind(text_all[[i]], text_pos[[i]])
}
if(length(text_neg[[i]][,1] > 0)){
text_all[[i]] <- rbind(text_all[[i]], text_neg[[i]])
}
names(text_all[[i]]) <- c('word', 'Freq')
}
text_all
subset(text_all[[15]][1], word=='성장')
subset(text_all[[15]][1], word=='가능')
subset(text_all[[15]], word=='가능')
subset(text_all[[15]], word=='가능')[2]
subset(text_all[[15]], word=='가능')[2][,1]
subset(text_all[[15]], word=='가능')
subset(text_all[[15]], word=='r')
length(subset(text_all[[15]], word=='r'))
length(subset(text_all[[15]], word=='r')[,1])
length(subset(text_all[[15]], word=='가능')[,1])
idf_bot <- c()
for(table_word in table_em$word){
word_cnt <- 0
for(i in 1:15){
if(length(subset(text_all[[i]], word==table_word)[,1]) > 0){
word_cnt <- word_cnt + 1
}
}
idf_bot <- c(idf_bot, word_cnt)
}
idf_bot
idf_top
idf <-idf_top / idf_bot
idf
idf_top
idf_bot
idf <- log(idf)
idf
idf <- log(idf)
tf_idf <- tf * idf
tf_idf
tf
idf
idf
idf_top
idf_bot
idf_bot
idf <- idf_top / idf_bot
idf <- log(idf)
idf
tf_idf <- tf * idf
tf_idf
